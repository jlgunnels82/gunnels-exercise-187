//AUTHOR: Jacob Gunnels
//COUSE: CPT 187
//PURPOSE: MainClass class for SodNotZod product ordering program.
//STARTDATE: 04/15/2020

package edu.cpt187.gunnels.participation;

import java.util.Scanner;

public class MainClass {

	public static final String[] MAIN_MENU_OPTIONS = {"Login", "Create Account", "Quit"};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to the Main Menu"};
	public static final String[] MENU_CHARS = {"[A] for ", "[B] for", "[Q] for "};
	public static final String[] FILE_MENU_CHARS = {"[A] for ", "[B] for", "[R] for "};
	public static final String[] SUB_MENU_CHARS = {"[A] for ", "[B] for", "[C] for "};
	public static final String MASTER_ACCOUNTS_NAME = "MasterUserFile.dat";
	public static final String MASTER_FILE_NAME = "MasterOrderFile.dat";
	
	public static void main(String[] args) {
		
		String userName = "";
		char menuSelection = ' ';
		
		Scanner input = new Scanner(System.in);
		
		SodOrder mySodOrder = new SodOrder();
		Inventory currentInventory = new Inventory();
		UserAccounts currentUser = new UserAccounts(MASTER_ACCOUNTS_NAME);
		OrderWriter sodOrders = new OrderWriter(MASTER_FILE_NAME);
		
		displayWelcomeBanner();
		
		//Main Menu
		menuSelection = validateMainMenu(input);
		
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			
			//User selection [A] Login
			if (menuSelection == 'A')
			{
				//Users enter user name.
				userName = getUserName(input);
				currentUser.setSearchedIndex(userName);
				
				if (currentUser.getSearchedIndex() < 0)
				{
					displayUserNameError();
				}
				else
				{
					//Users enter password.
					currentUser.setSearchedIndex(userName, getPassword(input));
					
					if (currentUser.getSearchedIndex() < 0)
					{
						displayPasswordError();
					}
					else
					{
						displayLoginNotice();
						menuSelection = validateSubMenu(input);
						
						while (menuSelection != 'R')
						{
							if (menuSelection == 'A')
							{
								currentInventory.setLoadItems(getFileName(input));
								if (currentInventory.getRecordCount() <= 0)
								{
									displayNotOpen();
								}
								else
								{
									mySodOrder.setItemCountArray(currentInventory.getMaxRecords());
								}
							}
							else
							{
								currentInventory.setSearchIndex(validateSearchValue(input));
								
								if (currentInventory.getItemSearchIndex() < 0)
								{
									displayNotFound();
								}
								else
								{
									mySodOrder.setLastItemSelectionIndex(currentInventory.getItemSearchIndex());
									mySodOrder.setItemID(currentInventory.getItemIDs());
									mySodOrder.setItemName(currentInventory.getItemNames());
									mySodOrder.setItemPrice(currentInventory.getItemPrices());
									mySodOrder.setHowMany(validateHowMany(input));
									
									if (mySodOrder.getInStockCount(currentInventory.getInStockCounts()) < mySodOrder.getHowMany())
									{
										displayOutOfStock();
									}
									else
									{
										mySodOrder.setDiscountType(validateDiscountMenu(
										input,
										currentInventory.getDiscountNames(),
										currentInventory.getDiscountRates()));
								
										mySodOrder.setDiscountName(currentInventory.getDiscountNames());
										mySodOrder.setDiscountRate(currentInventory.getDiscountRates());
										mySodOrder.setDecreaseInStock(currentInventory);
										mySodOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
										
										sodOrders.setWriteOrder(
												mySodOrder.getItemID(), 
												mySodOrder.getItemName(), 
												mySodOrder.getItemPrice(), 
												mySodOrder.getHowMany(),
												mySodOrder.getTotalCost());
										
										if (mySodOrder.getDiscountRate() > 0.0)// Displays receipt when a discount claimed
										{
											displayItemReceipt(
												mySodOrder.getItemName(),
												mySodOrder.getItemPrice(),
												mySodOrder.getHowMany(),
												mySodOrder.getDiscountName(),
												mySodOrder.getDiscountRate(),
												mySodOrder.getDiscountAmt(),
												mySodOrder.getDiscountPrice(),
												mySodOrder.getSubTotal(),
												mySodOrder.getTaxRate(),
												mySodOrder.getTaxAmt(),
												mySodOrder.getTotalCost(),
												mySodOrder.getPrizeName(),
												mySodOrder.getInStockCount(currentInventory.getInStockCounts()));
										}
										else
										{
											displayItemReceipt(
												mySodOrder.getItemName(),
												mySodOrder.getItemPrice(),
												mySodOrder.getHowMany(),
												mySodOrder.getSubTotal(),
												mySodOrder.getTaxRate(),
												mySodOrder.getTaxAmt(),
												mySodOrder.getTotalCost(),
												mySodOrder.getPrizeName(),
												mySodOrder.getInStockCount(currentInventory.getInStockCounts()));
										}
									}//END else
								}//END else
							}//END else
							
							menuSelection = validateSubMenu(input);
							
						}//END while menuSelection != 'R'
					}//END else
				}// END user enters password
			}//User selection [A] Login
			else
			{
				//User selection [B] Create an account
				userName = getNewUserName(input);
				currentUser.setSearchedIndex(userName);
				
				if (currentUser.getSearchedIndex() >= 0)
				{
					displayNewUserNameError();
				}
				else 
				{
					currentUser.setWriteOneRecord(userName, getNewPassword(input));
					displayNewUserNameNotice(userName);
				}
			}
			
			menuSelection = validateMainMenu(input);
		
		}//END while menuSelection != 'Q'

		if (mySodOrder.getTotalCost() > 0.0)//Displays final report.
		{
			currentInventory.setLoadItems(sodOrders.getFileName(), sodOrders.getRecordCount());
			
			displayFinalReport(
				userName,
				currentInventory.getItemIDs(),
				currentInventory.getItemNames(),
				currentInventory.getInStockCounts(),
				mySodOrder.getItemCounts(),
				currentInventory.getDiscountNames(),
				mySodOrder.getDiscountCounts(),
				currentInventory.getPrizeNames(),
				mySodOrder.getPrizeCounts(),
				sodOrders.getRecordCount());
		}
		
		displayFarewellMessage();
		input.close();
		
	}//END main
	
	//METHODS
	//Welcome Banner
	public static void displayWelcomeBanner()
	{
		System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
		System.out.printf("%-10s%-49s%-1s\n", "+", "", "+");
		System.out.printf("%-10s%-49s%-1s\n", "+", "Welcome to SodNotZod!", "+");
		System.out.printf("%-10s%-49s%-1s\n", "+", "", "+");
		System.out.printf("%-10s%-49s%-1s\n", "+", "Use this program to search our selection", "+");
		System.out.printf("%-10s%-49s%-1s\n", "+", "and complete your order.", "+");
		System.out.printf("%-10s%-49s%-1s\n", "+", "", "+");
		System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
	}	
	
	//MENUS
	//Main Menu
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\n~~~~~ MAIN MENU ~~~~~\n");
		
		while (localIndex < MAIN_MENU_OPTIONS.length)
		{
			System.out.printf("%-8s%s\n", MENU_CHARS[localIndex], MAIN_MENU_OPTIONS[localIndex]);
			localIndex++;
		}
		System.out.print("\nEnter your selection here: ");
	}
	
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection;
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			System.out.println("\n------------------------------------------------------------");
			System.out.println("\nPlease enter a valid selection!");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		
		return localSelection;
	}
	
	//Sub Menu
	public static void displaySubMenu()
	{
		int localIndex = 0;
		System.out.println("\n~~~~~ ORDER MENU ~~~~~\n");
		
		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-1s\n", FILE_MENU_CHARS[localIndex], FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}	
		System.out.print("\nEnter your selection here: ");
	}
	
	public static char validateSubMenu(Scanner borrowedInput)
	{
		char localSelection;
		displaySubMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			System.out.println("\nPlease enter a valid selection.");
			displaySubMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return localSelection;
	}
	
	//Discount Menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\n~~~~~ DISCOUNT MENU ~~~~~\n");
		while (localIndex < SUB_MENU_CHARS.length)
		{
			System.out.printf("%-5s%-20s%8.1f%2s\n", SUB_MENU_CHARS[localIndex], borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex]*100, "%");
			localIndex++;
		}
		System.out.print("\nPlease enter your selection here: ");
	}
	
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection;
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		
		while (localSelection !='A' && localSelection !='B' && localSelection !='C')
		{
			System.out.println("\nPlease enter a valid selection: ");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return localSelection;
	}
	
	
	//ERROR MESSAGES
	public static void displayUserNameError()
	{
		System.out.println("\n~~~~~ Username not found ~~~~~");
		System.out.println("Please try again or create a new account.");
	}
	
	public static void displayPasswordError()
	{
		System.out.println("\n~~~~~ Invalid Password ~~~~~");
		System.out.println("Please try again or create a new account.");
	}
	
	public static void displayNewUserNameError()
	{
		System.out.println("\n~~~~~ Username already in use ~~~~~");
		System.out.println("Please choose a different Username");
		System.out.println("or login with this Username.");
	}
	
	public static void displayNotFound()
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\nSorry, that item ID was not found!");
		System.out.println("\nPlease try again.");
	}
	
	public static void displayNotOpen()
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\nSorry, the file specified is invalid.");
		System.out.println("Please try again.");
	}
	
	public static void displayOutOfStock()
	{
		System.out.println("\nSorry, the item you are looking for is currently out of stock.");
	}
	
	//INPUT
	public static String getPassword (Scanner borrowedInput)
	{
		System.out.print("\nPassword: ");
		return borrowedInput.next();
	}
	
	public static String getNewPassword (Scanner borrowedInput)
	{
		System.out.print("\nEnter a new password: ");
		return borrowedInput.next();
	}
	
	public static String getNewUserName (Scanner borrowedInput)
	{
		System.out.print("\nEnter a new username: ");	
		return borrowedInput.next();
	}
	
	public static String getUserName(Scanner borrowedInput)
	{
		System.out.print("\nPlease enter your user name: ");
		return borrowedInput.next();
	}
	
	public static String getFileName(Scanner borrowedInput)
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.print("\nPlease specify the file to load: ");
		return borrowedInput.next();
	}
	
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSelection;
		System.out.println("\n------------------------------------------------------------");
		System.out.print("\nEnter the item ID number: ");
		localSelection = borrowedInput.nextInt();
		
		while (localSelection < 0)
		{
			System.out.println("\n------------------------------------------------------------");
			System.out.println("Please enter a value greater than 0.");
			localSelection = borrowedInput.nextInt();
		}
		
		return localSelection;
	}
	
	public static int validateHowMany(Scanner borrowedInput)
	{
		int localHowMany;
		System.out.println("\n------------------------------------------------------------");
		System.out.print("\nPlease enter the quantity you would like to purchase: ");
		localHowMany = borrowedInput.nextInt();
		
		while (localHowMany <=0)
		{
			System.out.println("\n------------------------------------------------------------");
			System.out.println("\nPlease enter a value greater than 0.");
			System.out.print("\nPlease enter the quantity you would like to purchase: ");
			localHowMany = borrowedInput.nextInt();
		}
		return localHowMany;
	}
	
	
	
	
	
	//REPORTS
	public static void displayLoginNotice()
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\n~~~~~ Login successful! ~~~~~");
		System.out.println("\n------------------------------------------------------------");
	}
	
	public static void displayNewUserNameNotice(String borrowedUserName)
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\n~~~~~ NEW ACCOUNT CONFIRMATION ~~~~~");
		System.out.println("\nThank you " + borrowedUserName + "!");
		System.out.println("Your new account is ready for use.");
		System.out.println("\n------------------------------------------------------------");	
	}
	
	public static void displayItemReceipt(
			String borrowedItemNames,
			double borrowedItemPrice,
			int borrowedHowMany,
			String borrowedDiscountNames,
			double borrowedDiscountRate,
			double borrowedDiscountAmt,
			double borrowedDiscountPrice,
			double borrowedSubTotal,
			double borrowedTaxRate,
			double borrowedTaxAmt,
			double borrowedTotalCost,
			String borrowedPrizeName,
			int borrowedInStockCounts)
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\nITEM RECEIPT\n");
		System.out.printf("%-20s%s\n", "Item Purchased: ", borrowedItemNames);
		System.out.printf("%-20s%8.2f\n", "Item Price: ", borrowedItemPrice);
		System.out.printf("%-20s%d\n", "Quantity: ", borrowedHowMany);
		System.out.printf("%-1s%-19s%d\n", borrowedItemNames, " in stock: ", borrowedInStockCounts);
		System.out.printf("%-20s%s\n", "Discount Used: ", borrowedDiscountNames);
		System.out.printf("%-20s%8.1f%2s\n", "Discount Rate: ", borrowedDiscountRate*100, "%");
		System.out.printf("%-20s%8.2f\n", "Discount Amount: ", borrowedDiscountAmt);
		System.out.printf("%-20s%8.2f\n", "Discount Price: ", borrowedDiscountPrice);
		System.out.printf("\n%-20s%8.2f\n", "Sub Total: ", borrowedSubTotal);
		System.out.printf("%-20s%8.2f\n", "Tax: ", borrowedTaxAmt);
		System.out.printf("\n%-20s%8.2f\n", "TOTAL COST: ", borrowedTotalCost);
		System.out.println("\n~~~~~ You won a prize! ~~~~~\n");
		System.out.printf("%-20s%10s\n", "Your prize:", borrowedPrizeName);
		System.out.println("\n------------------------------------------------------------\n");
	}
	
	public static void displayItemReceipt(
			String borrowedItemNames,
			double borrowedItemPrice,
			int borrowedHowMany,
			double borrowedSubTotal,
			double borrowedTaxRate,
			double borrowedTaxAmt,
			double borrowedTotalCost,
			String borrowedPrizeName,
			int borrowedInStockCounts)
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\nITEM RECEIPT\n");
		System.out.printf("%-20s%s\n", "Item Purchased: ", borrowedItemNames);
		System.out.printf("%-20s%8.2f\n", "Item Price: ", borrowedItemPrice);
		System.out.printf("%-20s%d\n", "Quantity: ", borrowedHowMany);
		System.out.printf("%-1s%-19s%d\n", borrowedItemNames, " in stock: ", borrowedInStockCounts);
		System.out.printf("\n%-20s%8.2f\n", "Sub Total: ", borrowedSubTotal);
		System.out.printf("%-20s%8.2f\n", "Tax: ", borrowedTaxAmt);
		System.out.printf("\n%-20s%8.2f\n", "TOTAL COST: ", borrowedTotalCost);
		System.out.println("\n~~~~~ You won a prize! ~~~~~\n");
		System.out.printf("%-20s%10s\n", "Your prize:", borrowedPrizeName);
		System.out.println("\n------------------------------------------------------------\n");
	}
	
	public static void displayFinalReport(
			String userName,
			int[] borrowedItemIDs,
			String[] borrowedItemNames, 
			int[] borrowedInStockCounts,
			int[] borrowedItemCounts, 
			String[] borrowedDiscountNames, 
			int[] borrowedDiscountCounts,
			String[] borrowedPrizeNames,
			int[] borrowedPrizeCounts,
			int borrowedRecordCount)
	{
		System.out.println("\n------------------------------------------------------------");
		System.out.println("\nFINAL REPORT for " + userName + ".\n");
		
		int localIndex = 0;
		while (localIndex < borrowedItemNames.length && borrowedItemCounts[localIndex] > 0)
		{
			System.out.printf("%-20s%-20d\n", "Item ID: ", borrowedItemIDs[localIndex]);
			System.out.printf("%-20s%-20s\n", "Item Names: ", borrowedItemNames[localIndex]);
			System.out.printf("%-20s%-20d\n", "Items In Stock: ", borrowedInStockCounts[localIndex]);
			System.out.printf("%-20s%-20d\n", "Item Counts: ", borrowedItemCounts[localIndex]);
			
			System.out.printf("%-20s%-20s\n", "Discount Names: ", borrowedDiscountNames[localIndex]);
			System.out.printf("%-20s%-20d\n", "Discount Counts: ", borrowedDiscountCounts[localIndex]);
			
			System.out.printf("%-20s%-20s\n", "Prize Names: ", borrowedPrizeNames[localIndex]);
			System.out.printf("%-20s%-20d\n", "Prize Counts: ", borrowedPrizeCounts[localIndex]);
			
			
			localIndex++;
		}
		
		System.out.printf("%-20s%-20d\n", "Record Count: ", borrowedRecordCount);
		System.out.println("\n------------------------------------------------------------\n");
	}
	
	//Farewell Message
	public static void displayFarewellMessage()
	{
		System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
		System.out.printf("%-10s%-49s%-1s\n", "+", "", "+");
		System.out.printf("%-10s%-49s%-1s\n", "+", "Thank your for shopping at SodNotZod!", "+");
		System.out.printf("%-10s%-49s%-1s\n", "+", "", "+");
		System.out.println("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
	}
}//END main class
