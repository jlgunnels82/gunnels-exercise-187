//AUTHOR: Jacob Gunnels
//COUSE: CPT 187
//PURPOSE: Inventory class for SodNotZod product ordering program.
//			Supportive class to set arrays, sort and search.
//STARTDATE: 04/15/2020

package edu.cpt187.gunnels.participation;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class Inventory {
	
	private final String[] DISCOUNT_NAMES = {"Member", "Senior", "No Discount"};
	private final double[] DISCOUNT_RATES = {0.25, 0.15, 0.0};
	private final String[] PRIZE_NAMES = {"Worn-out Shoes", "Half-eaten Doughnut", "Unloaded Giftcard"};
	private final int MAX_RECORDS = 5;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	
	private int[] itemIDs = new int[MAX_RECORDS];
	private String[] itemNames = new String[MAX_RECORDS];
	private double[] itemPrices = new double[MAX_RECORDS];
	private int[] orderQuantity = new int[MAX_RECORDS];
	private double[] orderTotal = new double[MAX_RECORDS];
	private int[] inStockCounts = new int[MAX_RECORDS];
	private int itemSearchIndex = 0;
	private int recordCount = 0;
	private Random prizeGenerator = new Random();
	
	public Inventory()
	{
		
	}
	
	//Setters
	public void setReduceStock(int borrowedHowMany)
	{
		 inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany; 
			
	}
	
	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;
		try 
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			
			while (infile.hasNext() == true && recordCount < MAX_RECORDS)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			}//END while
			
			infile.close();
			
		}//END try
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}
	}//END setLoadItems
	
	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		recordCount = RESET_VALUE;
		
		try
		{
			Scanner infile = new Scanner(new FileInputStream(borrowedFileName));
			
			while (infile.hasNext() == true && recordCount < MAX_RECORDS && recordCount < borrowedSize)
			{
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++;
			}
			
			infile.close();
			setBubbleSort();
			
		}//END try
		catch (IOException ex)
		{
			recordCount = NOT_FOUND;
		}
	}//end SETlOADiTEMS
	
	public void setSearchIndex(int borrowedID)
	{
		itemSearchIndex = getSearchResults(borrowedID);
	}
	
	public void setBubbleSort()
	{
		int last = recordCount - 1;
		
		while (last > RESET_VALUE)
		{
			int index = RESET_VALUE;
			boolean swap = false;
			
			while (index < last)
			{
				if (itemIDs[index] > itemIDs[index + 1])
				{
					setSwapArrayElements(index);
					swap = true;
				}
				
				index++;
			}//END while
			
			if (swap == false)
			{
				last = RESET_VALUE;
			}
			else
			{
				last = last - 1;
			}
		}//END while
	}
	//setBubbleSort
	
	public void setSwapArrayElements(int borrowedIndex)
	{
		int localInt = 0;
		String localString = "";
		double localDouble = 0.0;
		
		localInt = itemIDs[borrowedIndex];
		itemIDs[borrowedIndex] = itemIDs[borrowedIndex + 1];
		itemIDs[borrowedIndex + 1] = localInt;
		
		localString = itemNames[borrowedIndex];
		itemNames[borrowedIndex] = itemNames[borrowedIndex +1];
		itemNames[borrowedIndex + 1] = localString;
		
		localDouble = itemPrices[borrowedIndex];
		itemPrices[borrowedIndex] = itemPrices[borrowedIndex +1];
		itemPrices[borrowedIndex +1] = localDouble;
		
		localInt = inStockCounts[borrowedIndex];
		inStockCounts[borrowedIndex] = inStockCounts[borrowedIndex + 1];
		inStockCounts[borrowedIndex +1] = localInt;
		
		localInt = orderQuantity[borrowedIndex];
		orderQuantity[borrowedIndex] = orderQuantity[borrowedIndex + 1];
		orderQuantity[borrowedIndex + 1] = localInt;
		
		localDouble = orderTotal[borrowedIndex];
		orderTotal[borrowedIndex] = orderTotal[borrowedIndex + 1];
		orderTotal[borrowedIndex + 1] = localDouble;
	}
	
	
	//Getters
	public int[] getInStockCounts()
	{		
		return inStockCounts;
	}
	
	public int[] getItemIDs()
	{
		return itemIDs;
	}
	
	public String[] getItemNames()
	{
		return itemNames;
	}
	
	public double[] getItemPrices()
	{
		return itemPrices;
	}
	
	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}
	
	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}

	public int[] getOrderQuantities()
	{
		return orderQuantity;
	}
	
	public double[] getOrderTotals()
	{
		return orderTotal;
	}
	
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}
	
	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}
	
	public int getMaxRecords()
	{
		return MAX_RECORDS;
	}
	
	public int getItemSearchIndex()
	{
		return itemSearchIndex;
	}
	
	public int getRecordCount()
	{
		return recordCount;
	}
	
	public int getSearchResults(int borrowedBorrowedID)
	{
		int first = 0;
		int last = recordCount - 1;
		int mid = 0;
		boolean found = false;
		
		
		if (first <= last && found == false)
		{
			mid = (first + last)/2;
			
			if (itemIDs[mid] == borrowedBorrowedID)
			{
				found = true;
			}
			else
			{
				if (itemIDs[mid] < borrowedBorrowedID)
				{
					first = mid + 1;
				}
				else
				{
					last = mid - 1;
				}
			}
		}
		
		if (found = false)
		{
			mid = NOT_FOUND;
		}
		
		return mid;
	}
}//END Inventory


